generator Client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql" 
  url          = env("DATABASE_DATABASE_URL")
}

model Category {
  id   String @id @default(uuid())
  name String @unique(map: "Category_name_key")

  courses Course[]
}

model Course {
  id          String   @id @default(uuid())  
  userId      String
  title       String   @db.Text
  description String?  @db.Text
  imageUrl    String?  @db.Text
  isPublished Boolean  @default(false)
  categoryId  String? 
  certificateEnabled Boolean @default(false)

  category   Category? @relation(fields: [categoryId], references: [id])
  modules   Module[]
  attachments Attachment[]
  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  chapter Chapter[]
  // quiz Quiz[]
}

model Module {
  id        String   @id @default(uuid())
  title     String
  position  Int      @default(0)
  courseId  String

  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters  Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Quiz Quiz[]

  QuizResult QuizResult[]
}

model Chapter {
  id         String  @id @default(uuid())
  title      String
  position   Int

  moduleId   String?
  courseId String
  courses   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  module     Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  lessons    Lesson[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

model Lesson {
  id         String  @id @default(uuid())
  title      String
  content    String?  @db.Text
  videoUrl   String?  @db.Text
  imageUrl   String?  @db.Text
  chapterId  String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Quiz {
  id         String   @id @default(uuid())
  title      String
  moduleId  String?  // optional
  module    Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions  Question[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}



model Question {
  id       String  @id @default(uuid())
  text     String
  quizId   String

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options QuizOption []

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model QuizOption  {
  id         String  @id @default(uuid())
  text       String
  isCorrect  Boolean
  questionId String

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model UserProgress {
  id          String  @id @default(uuid())
  userId      String
  lessonId    String?
  isCompleted Boolean @default(false)

  lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, lessonId]) // Ensures tracking per user per lesson
}

model Enrollment {
  id       String @id @default(uuid())
  userId   String
  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
}


model Attachment {
  id        String   @id @default(uuid()) // Ensure primary key
  name      String
  url       String   @db.Text
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}


model QuizResult {
  id         String      @id @default(cuid())
  userId     String
  module     Module      @relation(fields: [moduleId], references: [id])
  moduleId   String

  score      Int
  answers    Json        // сюда сохраняем массив выбранных вариантов (например [0,2,1,...])

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([userId, moduleId])  // запрещаем дублирование результатов для одного пользователя по одному модулю
}