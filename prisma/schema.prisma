generator Client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId], map: "Attachment_courseId_idx")
  Course Course[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique(map: "Category_name_key")

  Course Course[]
}

model Course {
  id          String   @id @default(uuid())  
  userId      String
  title       String   @db.Text
  description String?  @db.Text
  imageUrl    String?  @db.Text
  isPublished Boolean  @default(false)
  categoryId  String?

  category Category? @relation(fields: [categoryId], references: [id])
  chapters Chapter[]
  attachments Attachment[]
  enrollments Enrollment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@index([categoryId], map: "Course_categoryId_idx")
}


model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  imageUrl    String?  @db.Text    
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)

  muxData     MuxData? 

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]    
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt()
}
model MuxData {  
  id String @id @default(uuid())  
  assetId String  
  playbackId String?  

  chapterId String @unique  
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)  
}

model UserProgress {
    id          String   @id @default(uuid())
    userId      String

    chapterId   String
    chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    isCompleted Boolean  @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt()

    @@index([chapterId]) // Corrected syntax
    @@unique([userId, chapterId]) // Ensure unique combination of userId and chapterId
}

// model Purchase {
//     id String @id @default(uuid())
//     userId String

//     courseId String
    
//     course Course @relation(fields: [courseId], references: [id], onDelete: Cascade) // Error validating field `course` in model `Purchase`. The rela

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt()

    

//     @@index([courseId])
//     @@unique([userId, courseId])
// }

model Enrollment {
    id String @id @default(uuid())
    userId String

    courseId String
    
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade) // Error validating field `course` in model `Purchase`. The rela

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@index([courseId])
    @@unique([userId, courseId])
}



